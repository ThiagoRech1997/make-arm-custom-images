#!/bin/bash

# =============================================================================
# Make ARM Custom Images - Script para Parar QEMU
# =============================================================================
# Este script para o QEMU de forma segura

set -euo pipefail

# =============================================================================
# CONFIGURA√á√ÉO E INICIALIZA√á√ÉO
# =============================================================================

# Diret√≥rio do script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Carregar configura√ß√µes
if [[ -f "$PROJECT_ROOT/.env" ]]; then
    source "$PROJECT_ROOT/.env"
else
    echo "‚ùå Arquivo .env n√£o encontrado!"
    echo "   Copie env.example para .env e configure as vari√°veis."
    exit 1
fi

# Carregar fun√ß√µes utilit√°rias
source "$SCRIPT_DIR/utils.sh"

# =============================================================================
# VARI√ÅVEIS LOCAIS
# =============================================================================

QEMU_TEMP_DIR="$PROJECT_ROOT/qemu/temp"
QEMU_PID_FILE="$QEMU_TEMP_DIR/qemu.pid"

# =============================================================================
# FUN√á√ïES PRINCIPAIS
# =============================================================================

# Fun√ß√£o para parar QEMU
stop_qemu() {
    if [[ -f "$QEMU_PID_FILE" ]]; then
        local qemu_pid=$(cat "$QEMU_PID_FILE")
        
        if kill -0 "$qemu_pid" 2>/dev/null; then
            log_info "Parando QEMU (PID: $qemu_pid)..."
            
            # Tentar parada graciosa
            kill "$qemu_pid"
            
            # Aguardar processo terminar
            local count=0
            while kill -0 "$qemu_pid" 2>/dev/null && [[ $count -lt 10 ]]; do
                sleep 1
                ((count++))
            done
            
            # For√ßar parada se necess√°rio
            if kill -0 "$qemu_pid" 2>/dev/null; then
                log_warn "For√ßando parada do QEMU..."
                kill -9 "$qemu_pid"
                sleep 2
            fi
            
            # Verificar se parou
            if kill -0 "$qemu_pid" 2>/dev/null; then
                log_error "Falha ao parar QEMU"
                return 1
            else
                log_success "QEMU parado com sucesso"
            fi
        else
            log_warn "QEMU n√£o estava rodando (PID: $qemu_pid)"
        fi
        
        # Remover arquivo PID
        rm -f "$QEMU_PID_FILE"
    else
        log_warn "Arquivo PID n√£o encontrado: $QEMU_PID_FILE"
        
        # Tentar encontrar processo QEMU por nome
        local qemu_processes=$(pgrep -f "qemu-system-arm.*$(basename "$OUTPUT_FILENAME")" || true)
        
        if [[ -n "$qemu_processes" ]]; then
            log_info "Encontrados processos QEMU: $qemu_processes"
            
            for pid in $qemu_processes; do
                log_info "Parando processo QEMU: $pid"
                kill "$pid"
            done
            
            log_success "Processos QEMU parados"
        else
            log_info "Nenhum processo QEMU encontrado"
        fi
    fi
}

# Fun√ß√£o para limpeza
cleanup() {
    log_info "Limpando arquivos tempor√°rios..."
    
    # Remover arquivos tempor√°rios
    if [[ -d "$QEMU_TEMP_DIR" ]]; then
        rm -rf "$QEMU_TEMP_DIR"
        log_success "Arquivos tempor√°rios removidos"
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    echo "=== Status do QEMU ==="
    
    if [[ -f "$QEMU_PID_FILE" ]]; then
        local qemu_pid=$(cat "$QEMU_PID_FILE")
        
        if kill -0 "$qemu_pid" 2>/dev/null; then
            echo "‚úÖ QEMU est√° rodando (PID: $qemu_pid)"
            echo "üìÅ PID File: $QEMU_PID_FILE"
            
            # Mostrar informa√ß√µes do processo
            if command_exists ps; then
                echo ""
                echo "üìä Informa√ß√µes do processo:"
                ps -p "$qemu_pid" -o pid,ppid,cmd,etime
            fi
        else
            echo "‚ùå QEMU n√£o est√° rodando (PID inv√°lido: $qemu_pid)"
            echo "üßπ Execute: $0 --clean"
        fi
    else
        echo "‚ùå QEMU n√£o est√° rodando (PID file n√£o encontrado)"
        
        # Verificar se h√° processos QEMU √≥rf√£os
        local qemu_processes=$(pgrep -f "qemu-system-arm" || true)
        
        if [[ -n "$qemu_processes" ]]; then
            echo "‚ö†Ô∏è  Encontrados processos QEMU √≥rf√£os:"
            for pid in $qemu_processes; do
                echo "   PID: $pid"
            done
            echo "üßπ Execute: $0 --force"
        fi
    fi
    
    echo "====================="
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help     Mostrar esta ajuda"
    echo "  -s, --status   Mostrar status do QEMU"
    echo "  -f, --force    For√ßar parada (SIGKILL)"
    echo "  -c, --clean    Limpar arquivos tempor√°rios"
    echo ""
    echo "Exemplos:"
    echo "  $0              # Parar QEMU graciosamente"
    echo "  $0 --status     # Mostrar status"
    echo "  $0 --force      # For√ßar parada"
    echo "  $0 --clean      # Limpar arquivos tempor√°rios"
    echo ""
}

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

main() {
    # Inicializar logging
    init_logging
    
    # Processar argumentos
    local status_flag=false
    local force_flag=false
    local clean_flag=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -s|--status)
                status_flag=true
                shift
                ;;
            -f|--force)
                force_flag=true
                shift
                ;;
            -c|--clean)
                clean_flag=true
                shift
                ;;
            *)
                log_error "Op√ß√£o desconhecida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Executar a√ß√µes baseadas nas flags
    if [[ "$status_flag" == "true" ]]; then
        show_status
        exit 0
    fi
    
    if [[ "$clean_flag" == "true" ]]; then
        cleanup
        exit 0
    fi
    
    if [[ "$force_flag" == "true" ]]; then
        log_info "For√ßando parada do QEMU..."
        
        if [[ -f "$QEMU_PID_FILE" ]]; then
            local qemu_pid=$(cat "$QEMU_PID_FILE")
            kill -9 "$qemu_pid" 2>/dev/null || true
            rm -f "$QEMU_PID_FILE"
        fi
        
        # Matar todos os processos QEMU
        pkill -9 -f "qemu-system-arm" 2>/dev/null || true
        log_success "QEMU for√ßado a parar"
        exit 0
    fi
    
    # Parar QEMU normalmente
    stop_qemu
}

# =============================================================================
# EXECU√á√ÉO
# =============================================================================

# Executar fun√ß√£o principal
main "$@" 